// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc103.Cyber103.commands;

import org.usfirst.frc103.Cyber103.RobotMap;

import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

/**
 *
 */
public class  TailAuto extends Command {
	
	private Thread thread;

    public TailAuto() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	thread = new Thread(new Runnable() {
			@Override
			public void run() {
				Talon tail = (Talon) RobotMap.tailTailController;
				tail.setSafetyEnabled(false);
				tail.set(1.0);
				Timer.delay(3.3);
				tail.set(0);
				
		    	RobotMap.driveTrainDriveEncoderLeft.setReverseDirection(true);
		    	RobotMap.driveTrainDriveEncoderRight.setReverseDirection(true);
		    	
        		RobotMap.driveTrainDriveEncoderLeft.reset();
        		RobotMap.driveTrainDriveEncoderRight.reset();
				while (RobotMap.driveTrainDriveEncoderLeft.getDistance() > -40.0) RobotMap.driveTrainRobotDrive.tankDrive(0.4, 0.4);
		    	RobotMap.driveTrainRobotDrive.tankDrive(0.0,  0.0);

				tail.set(-1.0);
				Timer.delay(3.0);
				tail.set(0);

        		RobotMap.driveTrainDriveEncoderLeft.reset();
        		RobotMap.driveTrainDriveEncoderRight.reset();
				while (RobotMap.driveTrainDriveEncoderLeft.getDistance() < 500.0) RobotMap.driveTrainRobotDrive.tankDrive(-0.7, -0.7);
		    	RobotMap.driveTrainRobotDrive.tankDrive(0.0,  0.0);

        		RobotMap.driveTrainDriveEncoderLeft.reset();
        		RobotMap.driveTrainDriveEncoderRight.reset();
        		while (RobotMap.driveTrainDriveEncoderLeft.getDistance() > -120) RobotMap.driveTrainRobotDrive.tankDrive(0.6,  -0.6);
		    	RobotMap.driveTrainRobotDrive.tankDrive(0.0, 0.0);
		    	
				RobotMap.driveTrainDriveEncoderLeft.setReverseDirection(false);
		    	RobotMap.driveTrainDriveEncoderRight.setReverseDirection(false);
			}
		});
    	thread.start();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	thread.stop();
    	RobotMap.driveTrainRobotDrive.tankDrive(0, 0);
    	RobotMap.tailTailController.set(0);
    }
}
