// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc103.Cyber103;

import org.usfirst.frc103.Cyber103.commands.*;
import org.usfirst.frc103.Cyber103.subsystems.RCGrabber;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton gearShiftButton;
    public Joystick joystickLeft;
    public Joystick joystickRight;
    public JoystickButton armGrabberOpen;
    public JoystickButton armGrabClose;
    public JoystickButton tailUpButt;
    public JoystickButton tailDownButt;
    public Joystick joystickOperator;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public JoystickButton rcGrabOpen;
    public JoystickButton rcGrabClose;

    public OI() {

    	
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickOperator = new Joystick(2);
        
        tailDownButt = new JoystickButton(joystickOperator, 2);
        tailDownButt.whileHeld(new TailDown());
        tailUpButt = new JoystickButton(joystickOperator, 3);
        tailUpButt.whileHeld(new TailUp());
        armGrabClose = new JoystickButton(joystickOperator, 5);
        armGrabClose.whileHeld(new ArmGrabButtonClose());
        armGrabberOpen = new JoystickButton(joystickOperator, 6);
        armGrabberOpen.whenPressed(new ArmGrabButtonOpen());
        joystickRight = new Joystick(1);
        
        joystickLeft = new Joystick(0);
        
        gearShiftButton = new JoystickButton(joystickLeft, 1);
        gearShiftButton.whenPressed(new GearShiftCommand());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("TankDrive", new TankDrive());

        SmartDashboard.putData("ArmGrabButtonOpen", new ArmGrabButtonOpen());

        SmartDashboard.putData("GearShiftCommand", new GearShiftCommand());

        SmartDashboard.putData("CompCom", new CompCom());

        SmartDashboard.putData("ArmGrabButtonClose", new ArmGrabButtonClose());

        SmartDashboard.putData("MunRockAuto", new MunRockAuto());

        SmartDashboard.putData("ToteThenLeftAuto", new ToteThenLeftAuto());

        SmartDashboard.putData("ToteThenRightAuto", new ToteThenRightAuto());

        SmartDashboard.putData("ForwardLiftAuto", new ForwardLiftAuto());

        SmartDashboard.putData("ToteThenTForward", new ToteThenTForward());

        SmartDashboard.putData("LiftCom", new LiftCom());

        SmartDashboard.putData("TailCom", new TailCom());

        SmartDashboard.putData("ForwardAuto", new ForwardAuto());

        SmartDashboard.putData("RC", new RC());

        SmartDashboard.putData("TailUp", new TailUp());

        SmartDashboard.putData("TailDown", new TailDown());

        SmartDashboard.putData("TailAuto", new TailAuto());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        rcGrabOpen = new JoystickButton(joystickOperator, 1);
        rcGrabOpen.whenPressed(new RCGrabButtonOpen());
        rcGrabClose = new JoystickButton(joystickOperator, 4);
        rcGrabClose.whenPressed(new RCGrabButtonClose());
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystickLeft() {
        return joystickLeft;
    }

    public Joystick getJoystickRight() {
        return joystickRight;
    }

    public Joystick getJoystickOperator() {
        return joystickOperator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

